{"posts":[{"title":"windows 에서 리눅스커널 소스코드 다운로드하기","text":"윈도우 환경에서 리눅스 소스코드를 clone 해야할 이슈가 있어 정리한다. 고객사의 vpn 등의 환경이 윈도우즈만 제공하는 환경에서 커널코드를 받아 컴파일해야할때 유용하다. windows git client 의 특징결론적으로 이야기하면, windows git 을 설치할경우, fat, ntfs 파일 특성상 심볼릭링크와, 대소문자 구분이 안되기 때문에 다음의 옵션이 자동으로 켜진다. core.symlinks=false core.ignorecase=true 위의 옵션의 경우 강제로 global 옵션으로 켜지게 된다. 특이사항은 git config --global 명령어를 이용하여 강제로 세팅하더라도, 제대로 동작하지 않는경우가 발생한다. 우회방법강제로 심볼릭링크와 대소문자를 구분하는 옵션을 이용하여 코드를 받는다. 1git clone --config core.symlinks=true --config core.ignorecase=false --no-checkout YOUR_GIT_ADDRESS --config core.symlinks=true --config core.ignorecase=false 명령어를 이용하여 강제로 심볼릭링크와 대소문자를 구분하여 받도록한다. --no-checkout 옵션으로 코드를 직접 받지 않도록한다. 이유는, nftfs 파일시스템에서 대소문자 구분이 안되어서 코드를 받아도 정상적으로 코드를 받아오지 못한다. 추후, 다시 checkout 명령어를 통해서 코드를 완성시킨다. 위의 명령어를 통하지 않는다면, --no-checkout 을 통해서 .git 만 다운로드하여 리눅스 시스템에서 checkout 하더라도 파일이 다 깨져있다. 반드시 위의 옵션을 이용해야한다. 위의 옵션으로 코드를 받아오면 .git 폴더만 생성이된다. 리눅스로 카피하여 checkout 하기일단 윈도우즈에서는 무슨일을 하더라도, 심볼릭링크와 대소문자를 구분하여 코드를 checkout 하지 못한다. 위의 명령어를 통해서 받은 .git 폴더를 압축하여 linux 시스템으로 옮겨야한다. linux 시스템에서 checkout 명령어를 이용하면 리눅스 커널 소스코드를 이상없이 확인할 수있다.","link":"/git-windows-checkout.md.html"},{"title":"블로그 시작","text":"시작블로그 페이지를 새로 시작합니다. 복잡한 머릿속을 정리하기 위해서, 제대로 이것저것 해보기위해서 시작합니다. 업무와 연관성현재 진행중인 업무에 대한 내용은 업로드 하지 않습니다. 그냥 개인적인 호기심과 스터디에 대한 결과물만 작성합니다. 기존블로그와의 분리기존에 블로그는 그냥, 단편적인 지식들의 나열을… 이번 github page 쪽은 하나의 프로젝트단위로 한다는 생각으로 한번 꾸며볼까 합니다. 잘 부탁드립니다.","link":"/start-blog.md.html"},{"title":"test","text":"잡담 테스트 yocto-compile-internal-err","link":"/test.md.html"},{"title":"yocto 디버깅 팁","text":"본 게시물은 계속 업데이트됩니다. 욕토에서 작업 중 에러가 발생하였을때, 디버깅하는 과정이나 팁들을 정리합니다. 저도 스터디 하는 수준입니다. 틀린내용이나, 정정해야할 사항들은 댓글로 알려주세요. 레시피 WORKDIR 에 대해서레시피를 빌드하고 결과물, 로그등을 확인하기 위해서는 WORKDIR를 알아야합니다. WORKDIR 에 대해서 설명합니다. 일단, 각 레시피를 빌드 하게 되면, 각각의 레시피별로 WORKDIR 폴더가 만들어집니다. WORKDIR 폴더에 대한 설명은 다음의 공식 홈페이지를 참고합니다. https://www.yoctoproject.org/docs/1.8/ref-manual/ref-manual.html The pathname of the work directory in which the OpenEmbedded build system builds a recipe. This directory is located within the TMPDIR directory structure and is specific to the recipe being built and the system for which it is being built. The WORKDIR directory is defined as follows: ${TMPDIR}/work/${MULTIMACH_TARGET_SYS}/${PN}/${EXTENDPE}${PV}-${PR} The actual directory depends on several things: TMPDIR: The top-level build output directory MULTIMACH_TARGET_SYS: The target system identifier PN: The recipe name EXTENDPE: The epoch - (if PE is not specified, which is usually the case for most - recipes, then EXTENDPE is blank) PV: The recipe version PR: The recipe revision As an example, assume a Source Directory top-level folder name poky, a default Build Directory at poky/build, and a qemux86-poky-linux machine target system. Furthermore, suppose your recipe is named foo_1.3.0-r0.bb. In this case, the work directory the build system uses to build the package &gt; would be as follows: poky/build/tmp/work/qemux86-poky-linux/foo/1.3.0-r0 간단히 설명하면… tmp/work/qemux86-poky-linux/core-image-minimal/1.0-r0 와 같이, /tmp/work/아키텍쳐-프로젝트명/레시피이름/버젼명/ 의 경로가 기본 WORKDIR 입니다. 빌드한 패키지의 WORKDIR의 경로에 각종 정보가 있습니다. 각종 빌드로그 git clone 한 외부 코드 / 내부 레시피에서 복사한 코드 패치파일 특히, 각종 로그파일이 WORKDIR/temp 폴더안에 남아있으므로, 해당 폴더의 로그를 잘 확인하면 동작에 대한 상세정보를 얻을 수있습니다. 빌드중 에러가 났을때, 로그 확인하는 순서일반적인 에러 프린트 로그를 확인일단, 에러가 났다면 다음과 같이 -v 옵션을 켜서 빌드합니다. 1bitbake &lt;build_target&gt; -v -v 옵션은 빌드때의 각종 로그들을 stdout 으로 프린트 하게 됩니다. bitbake target 을 image 로 할 경우, 여러가지 빌드로그 가 한번에 쏟아져 나오게 되어, 분석이 힘듭니다. 단일 타겟에서 에러가 발생했다면, 단일 패키지 타겟으로 빌드합니다. 빌드 로그파일 확인빌드과정중에, 에러로그를 보면 최종적으로 어떤 동작중에 에러가 발생했는지 확인이 가능합니다. do_&lt;task&gt; 이런식으로 어떤 동작중에 에러가 발생했는지 확인후 WORKDIR/temp 디렉토리에서 해당 에 대한 모든 로그를 보시고 디버깅을 시작하시면됩니다. 로그가 남는방식은 다음과 같습니다. (공식문서 참고) 2.3.1. Task FailuresThe log file for shell tasks is available in ${WORKDIR}/temp/log.do_taskname.pid. For example, the do_compile task for the QEMU minimal image for the x86 machine (qemux86) might be tmp/work/qemux86-poky-linux/core-image-minimal/1.0-r0/temp/log.do_compile.20830. To see what BitBake runs to generate that log, look at the corresponding run.do_taskname.pid file located in the same directory. 예제 : 특정 task 빌드에러예를들어, busybox 를 빌드하다 do_install 과정중에 어러가 났다고 한다면, WORKDIR/temp 폴더에 가면 다음과 같이 do_install 에 대한 로그들을 볼수있습니다. 12345mypath/busybox/1.27.2-r0/temp$ ls -al *do_instal*lrwxrwxrwx 1 myuser myuser 22 12월 29 14:48 log.do_install -&gt; log.do_install.2051661-rw-r--r-- 1 myuser myuser 2077 12월 29 14:48 log.do_install.2051661lrwxrwxrwx 1 myuser myuser 22 12월 29 14:48 run.do_install -&gt; run.do_install.2051661-rwxr-xr-x 1 myuser myuser 23086 12월 29 14:48 run.do_install.2051661 log.do_install 파일에 빌드과정중의 에러들이 기록되어있습니다. 해당 기록만봐서는 정확히 어느과정중에 에러가 났는지 알기 어렵습니다. log.do_install 의 내용을 run.do_install 와 함께 유추해봅니다. run.do_install 파일은 install task 동작중에 완성된 형태의 스크립트 입니다. 욕토과정중에 어떠한 변수들이 어떻게 들어갔는지 해당 파일을 열어보면 알수있습니다. (컴파일과정이라면, 컴파일러 옵션까지 모두 확인가능합니다.) log.do_install 로그는 완성된 형태의 스크립트 실행도중에 에러를 기준으로 남기게 됩니다.","link":"/yocto-debug-tip-1.md.html"},{"title":"yocto 빌드시 특정패키지에서 internal compiler error 발생관련 (boost 빌드에러)","text":"yocto 빌드시 특정 패키지에서 알수없는 애러 (internal compiler error) 가 발생하는것에 대한 기록입니다. 일명 internal compiler error 문제증상yocto 를 사용하여 풀빌드(이미지빌드)할때 주로 발생하는데, 문제가 발생하는 패키지는 랜덤인것 같습니다. (증상이 랜덤하게, 랜덤한 패키지에서 발생합니다.) 저 같은경우는 boost 패키지에서 계속적으로 발생하였습니다. 에러로그를 분석하려고 해도, internal compiler error 라는 한정적인 정보로 왜발생하는지 아무리 디버깅을 해도 알수가 없었습니다. 이러한 알수없는 에러들은 다른 분들도 간혹격는것 같습니다. 이슈 메일링 링크 : https://www.yoctoproject.org/pipermail/yocto/2019-January/043902.html 1234567It almost looks like an internal compiler error but not quitesince at least until recently, any time the compilerdied, it would produce and log that included the &quot;internal compiler error&quot;string like this one: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57872and I don't see that here... hmmm. 발생원인사후적으로 발생원인을 추측해보면, 특정 host pc 의 빌드환경이 문제였던것 같습니다. 필자의 경우 라이젠최근 cpu 에서 우분투 18.04 에서 발생하였습니다. 문제해결방법문제해결 1 : OS 업데이트지인도 동일한 이슈를 겪었다고 합니다. 우분투 18.04 에서만 발생하였고, 우분투를 20.04 로 업데이트하여 해결하였다고 합니다. 만약, os 업데이트가 가능한 상황이면 다행이지만 os 변경이 때때로 불가능할때도있습니다. ㅠㅠ.. yocto version 에 따라서 특정 os를 지원하지 않기 때문입니다. (yocto 에서 recommand 하지 않은 os 버젼을 사용하게되면 host compile 할때 에러가 발생합니다. ㅠㅠ) 만약, os업데이트(변경이) 불가능하다면 다음의 조치들을 해봅니다. 문제해결 2 : 에러 패키지 레시피 수정 (컴파일러 job 변수 수정)에러가 계속적으로 나는 패키지가 있다면, 해당 패키지의 레시피를 수정하여 빌드할때의 job 갯수를 수정해줍니다. compile job 옵션을 조정하셔서 문제가 생기지 않는 값을 찾아줍니다. (그냥 속편하게 1/2 로 세팅하는것도 좋은방법일듯..) 문제에 대한원인이 cpu 의 멀티쓰레드에서 문제가된다고 판단했기 때문입니다. 실제 빌드를 하게되면, 문제가 발생하는 상황에서는 pc가 무척 느려져서 사용하기 힘들정도가 되기도 하였습니다. 예제 : boost 패키지에서 문제해결제가 계속적으로 문제가 됐던 패키지는 boost 패키지였습니다. boost 패키지에서 계속적으로 다음과 같은 에러가 났습니다. 1234567It almost looks like an internal compiler error but not quitesince at least until recently, any time the compilerdied, it would produce and log that included the &quot;internal compiler error&quot;string like this one: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57872and I don't see that here... hmmm. boost 의 레시피를 보면 다음과 같은 내용이 있습니다. -/boost/boost.inc 12345678# https://svn.boost.org/trac/boost/ticket/7634BOOST_PARALLEL_MAKE = &quot;${@oe.utils.parallel_make_argument(d, '-j%d', limit=16)}&quot;BJAM_OPTS = '${BOOST_PARALLEL_MAKE} -d+2 -q \\ ${BJAM_TOOLS} \\ -sBOOST_BUILD_USER_CONFIG=${WORKDIR}/user-config.jam \\ --build-dir=${S}/${TARGET_SYS} \\ --disable-icu \\ ${BJAM_EXTRA}' 위의 BOOST_PARALLEL_MAKE 변수에서 컴파일러 job (멀티쓰레드 빌드)를 설정하게 됩니다. 해당 변수를 조정해서, job 갯수를 조정하였습니다. 해당의 limit 을 limit=4 와 같이 숫자를 조정하여 job 갯수를 줄여줍니다. 즉 job 이문제가 되니, job 갯수를 확줄여버린거죠. 참고 : yocto 의 job 갯수 전역 설정 yocto 에서 job 관련 옵션 (-j 옵션) 변수들은 다음과 같습니다. PARALLEL_MAKE, BB_NUMBER_THREADS 메인 conf 에서 해당 변수를 설정하시고 빌드하시면 됩니다. 기본적인 job 변수는 위의 변수를 따릅니다. 임시적 해결해당 문제발생시, 급하게 해결하려면 다음과 같이 합니다. 에러가 나는 패키지를 bitbake -c do_cleanall &lt;error package&gt; 를 해서 깨끗하게 지운다. sstate-cache 폴더도 삭제한다. 새로 빌드한다. 이미지를 통째로 빌드하지말고, 문제가 된 패키지만 일단 클린빌드하여 넘어가도록합니다. ^^;; 그냥 임시방편.","link":"/yocto-compile-internal-err.md.html"},{"title":"publish test","text":"잘동작하는지? 테스트입니다. 안녕? yocto-compile-internal-err","link":"/test2.md.html"}],"tags":[{"name":"git","slug":"git","link":"/tags/git/"},{"name":"embedded-linux","slug":"embedded-linux","link":"/tags/embedded-linux/"},{"name":"잡담","slug":"잡담","link":"/tags/%EC%9E%A1%EB%8B%B4/"},{"name":"주저리주저리","slug":"주저리주저리","link":"/tags/%EC%A3%BC%EC%A0%80%EB%A6%AC%EC%A3%BC%EC%A0%80%EB%A6%AC/"},{"name":"yocto","slug":"yocto","link":"/tags/yocto/"}],"categories":[{"name":"study","slug":"study","link":"/categories/study/"},{"name":"잡담","slug":"잡담","link":"/categories/%EC%9E%A1%EB%8B%B4/"}],"pages":[{"title":"about","text":"kksworks 의 블로그(자료정리노트)입니다. 자기소개 “비밀입니다~” 개발자일을 계속 하고싶습니다.… 사는곳 : 대한민국 어딘가.. 하는일 : 개삽질, AS, 잡부 : kksworks@gmail.com : https://github.com/kksworks 블로그에 대하여.. 관심있는 것들을 모두 정리하고자 합니다. 퍼오는것은 없이 온전히 직접 작성한것만 게시합니다. 펌자료원본 링크로 해당 페이지에서 보시길 권장드립니다. 퍼가시는건 자유. 출처는 밝혀주세요.. 회사업무와 관련한 내용들을 업로드 하지 않습니다. 그냥 개인적인 호기심과 스터디에 대한 결과물만 작성합니다. historypersonal history 2024/01/01 : 아직도 개발자를 하고있음 (다행..) 2020/12/24 : 모두다 새로 시작 2019/07/18 : 새로 블로그를 시작 및 공부를 다시하려고 다짐 2019/01/01 : 새로운 회사로 이직, 정신없음 blog history 2024/05/01 : github page 신규세팅 (HEXO 버젼 업, 및 repo 재구성) 2024/04/01 : tistory 포스팅중지 (api 지원 종료 ㅠ) 2020/12/25 : 시작이 반 2020/12/24 : github page io 로 다시 시작 (블로그초기화) : 공부 다시시작 버닝","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}]}